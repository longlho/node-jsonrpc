{"name":"Node-jsonrpc","body":"# Overview\r\n[![Build Status](https://secure.travis-ci.org/longlho/node-jsonrpc.png)](https://secure.travis-ci.org/longlho/node-jsonrpc)\r\n\r\nThis is a JSON-RPC protocol implementation in NodeJS that follows JSON-RPC 2.0 specs. The good and also bad thing about this library is that it enforces method handler modules to have a certain convention/design pattern. However, it allows the server to automatically extract documentation from the handler (Introspection). This library is still under development.\r\n\r\n## Features\r\n- Handles GET/POST requests\r\n- Better error feedback\r\n- Allows method namespacing (Module.method)\r\n- Allows exposure of all methods inside a module\r\n- Authentication can be achieved by giving a preHandle function\r\n- Introspection (currently planning)\r\n\r\n## Installation\r\nThe usual `npm install njrpc` or if you prefer, you can grab the source/fork it and make changes yourself.\r\n\r\n## Usage\r\nHandlers that can be registered with njrpc should have a name attribute in the instance. A sample handler can be found in handler.js.\r\n\r\nThe best design pattern to use with this server is the Module design pattern.\r\n\r\n### njrpc.errors\r\nList of errors that JSON-RPC server supports.\r\n\r\n### njrpc.modules\r\nMap of all the RPC module, in the form of `modules[className].methodName`\r\n\r\n### njrpc.register(modules)\r\nRegisters an array of modules/a single module, which should have `name` as the namespace of the module.\r\n\r\n### njrpc.interceptor\r\nInterceptor capable of pre-processing json request before it get\r\ndispatched to Handler modules.\r\nThis function takes in 2 parameters:\r\n\r\n- `jsonRequest`: JSON request object\r\n- `next`: Function signaling continuation of the process. Passing an\r\n  `Error` to this function will force server to return an error response\r\ninstead of moving on.\r\n\r\n### njrpc.paths\r\nMap of custom URL to handler function. Handler function takes in 2\r\narguments: \r\n\r\n- `req`: Request object\r\n- `res`: Response object to write to\r\n\r\n### njrpc.output(res, [jsonResponse])\r\nActually write the JSON response out to the pipe. This can also be overridden to write something else.\r\n\r\n### njrpc.handle(req, res, [preHandleFn])\r\nHandles a request & response, JSON-RPC style. `preHandleFn` is used to manipulate the JSON request before it gets pushed down to the Handler level. `preHandleFn` takes a single JSON request object as the argument (after parsing and whitelisting)\r\n\r\n## Examples\r\n\r\n### Simple EchoHandler that echoes whatever it receives\r\n\r\n```javascript\r\nvar EchoHandler = function () {\r\n\t\treturn {\r\n\t\t\tname : 'EchoHandler',\r\n\t\t\techo : function (str) {\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n,\tjrpcServer = require('njrpc')\r\n,\thttp = require('http');\r\n\r\njrpcServer.register(new EchoHandler());\r\nhttp.createServer(jrpcServer.handle).listen(8080);\r\n```\r\n### Authenticated Echo Handler that still echoes, but needs a user & token\r\n\r\n```javascript\r\nvar AuthenticatedEchoHandler = function () {\r\n\t\treturn {\r\n\t\t\tname : 'AuthenticatedEchoHandler',\r\n\t\t\techo : function(context, str) {\r\n\t\t\t\tif (!context.user || !context.token) {\r\n\t\t\t\t\tthrow new Error(\"This call is unauthenticated\");\r\n\t\t\t\t}\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n,\tpreHandler = function (jsonReq, next) {\r\n\t\tif (jsonReq.headers) {\r\n\t\t\tArray.isArray(jsonReq.params)\r\n\t\t\t? jsonReq.params.unshift(jsonReq.headers)\r\n\t\t\t: jsonReq.params.context = jsonReq.headers;\r\n\t\t\treturn next();\r\n\t\t}\r\n\t\treturn next(new Error('User has to be authenticated'));\r\n\t}\r\n,\tjrpcServer = require('njrpc')\r\n,\thttp = require('http');\r\n\r\njrpcServer.register(new AuthenticatedEchoHandler());\r\njrpcServer.interceptor = preHandler;\r\nhttp.createServer(jrpcServer.handle).listen(8080);\r\n```\r\n","tagline":"JSON-RPC protocol implementation in NodeJS","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}